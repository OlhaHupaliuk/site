import { useEffect, useState } from "react";
import ProductsList from "./components/ProductsList";
import Loader from "./components/Loader";

function App() {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [timestamp, setTimestamp] = useState(null);
  const [count, setCount] = useState(0);
  const [error, setError] = useState(null);

  async function fetchLatest() {
    setLoading(true);
    setError(null); // Reset error state
    try {
      const res = await fetch("https://technostock.onrender.com/api/latest");
      if (!res.ok) throw new Error("Failed to fetch latest products");
      const data = await res.json();
      setProducts(data.products);
      setTimestamp(data.timestamp);
      setCount(data.count);
    } catch (err) {
      setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    } finally {
      setLoading(false);
    }
  }

  async function runScraper() {
    setLoading(true);
    setError(null); // Reset error state
    try {
      const res = await fetch("https://technostock.onrender.com/api/scrape", { method: "POST" });
      if (!res.ok) throw new Error("Failed to run scraper");
      const data = await res.json();
      setProducts(data.products);
      setTimestamp(data.timestamp);
      setCount(data.count);
    } catch (err) {
      setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–∞—Ä—Å–µ—Ä. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.");
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    fetchLatest();
  }, []);

  return (
    <div className="p-6 font-sans">
      <h1 className="text-2xl font-bold mb-4">üõ† –ù–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏</h1>

      <div className="mb-4 flex gap-4">
        <button
          onClick={runScraper}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg shadow hover:bg-blue-700"
        >
          üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–∞—Ä—Å–µ—Ä
        </button>
        {timestamp && (
          <p className="text-gray-600">
            –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {timestamp} ({count} –Ω–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤)
          </p>
        )}
      </div>

      {error && (
        <p className="text-red-500 mb-4">{error}</p>
      )}
      {loading ? <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p> : <ProductsList products={products} />}
    </div>
  );
}

export default App;